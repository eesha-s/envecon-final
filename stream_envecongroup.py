# -*- coding: utf-8 -*-
"""stream_envecongroup.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zyVGSYmE-FdCw6xbVYT9LsVnaZc5Qp5G

# **Data Import**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#!pip install openpyxl

co2=pd.read_csv('https://raw.githubusercontent.com/eesha-s/envecon_group/refs/heads/main/co2_group.csv')
co2.head()

disasters=pd.read_excel('https://github.com/eesha-s/envecon_group/raw/main/disasters_portugal.xlsx')
disasters.head()
#year names are weird and i don't need this much specific data--> will simplify in the next section

energy=pd.read_csv('https://raw.githubusercontent.com/eesha-s/envecon_group/refs/heads/main/energy_use_per_person.csv')
energy.head()

temperature=pd.read_excel('https://github.com/eesha-s/envecon_group/raw/main/era5-x0.25_timeseries_tas_timeseries_annual_1950-2022_mean_historical_era5_x0.25_mean.xlsx')
temperature.head()
#the year names are weird...going to have to change it

gdp=pd.read_csv('https://raw.githubusercontent.com/eesha-s/envecon_group/refs/heads/main/gdp_pcap.csv')
gdp.head()

"""# **Data Wrangling**

the first three conversions will be the same as the other project!
"""

# WE FIRST NEED TO CONVERT CO2 FROM WIDE TO LONG
co2_long=pd.melt(co2, id_vars='country',var_name="Year",value_name="Emissions")
co2_long['Year'].dtype
#we want to convert year into a numeric data type
co2_long['Year']=pd.to_numeric(co2_long['Year'])
co2_long['Year'].dtype #yay!
co2_long=co2_long.rename(columns={'country': 'Country'}) #capitalized
co2_long['Label']='CO2 Emissions'
co2_long.head()

print(gdp.shape)
#now let's restructure this table again
gdp_long=pd.melt(gdp, id_vars='country',var_name="Year",value_name="GDP")
gdp_long['Year']=pd.to_numeric(gdp_long['Year'])
gdp_long=gdp_long.rename(columns={'country': 'Country'})
gdp_long['Label']='GDP Growth/Capita'
gdp_long.head()

#now we can do the same with energy use
energy_long=pd.melt(energy,id_vars='country',var_name="Year",value_name="Energy Use")
energy_long['Year']=pd.to_numeric(energy_long['Year'])
energy_long=energy_long.rename(columns={'country': 'Country'})
energy_long['Label']='Energy Use'
energy_long.head()

"""but now! i have to figure out how to work with the temperature and natural disaster data. I will start with temperature.
1. convert to long format
2. fix the year labels
"""

temperature.head()
temperature_long=pd.melt(temperature,id_vars=['code','name'],var_name="Year",value_name="Temperature")
temperature_long=temperature_long.rename(columns={'name': 'Country'})
temperature_long=temperature_long.drop(columns=['code'])
temperature_long['Indicator']='Temperature'
temperature_long['Label']='Temperature(Celsius)'
temperature_long=temperature_long.rename(columns={'Temperature': 'Value'})

#let's fix the weird year formatting :)
temperature_long["Year"]=temperature_long["Year"].astype(str).str[:4] #easier to index if we use a string
temperature_long['Year']=pd.to_numeric(temperature_long['Year'])
temperature_long.head()

"""yay! looking good. now we have to sort through the disasters dataframe"""

#first, i'll fix the year classification
disasters=disasters.rename(columns={'DisNo.': 'Year'})
disasters['Year']=disasters['Year'].astype(str).str[:4]
disasters.head()
#all we really need is total disasters count! so let me just add up for each year
disasters['Total Disasters']=disasters.groupby('Year')['Year'].transform('count')

#great now let's make this long and only pick the important info
disasters=disasters[['Country','Year','Total Disasters']]
disasters.head()
disasters['Indicator']='Total Disasters'
disasters['Label']='Total Disasters'
disasters=disasters.rename(columns={'Total Disasters': 'Value'})
disasters.head()

"""# **Data Joining**

i will go ahead and follow the same format used for the other project!
"""

co2_gdp=pd.merge(co2_long,gdp_long,on=['Country','Year','Label'],how='outer')
co2_gdp_energy=pd.merge(co2_gdp,energy_long,on=['Country','Year','Label'],how='outer')
co2_gdp_energy

data_wide=co2_gdp_energy.pivot_table(index=['Country','Year','Label'], values=['Emissions', 'GDP', 'Energy Use'],aggfunc='first').reset_index()
data_wide.head()

data_long=pd.melt(data_wide,id_vars=['Country','Year','Label'],value_vars=['Emissions', 'GDP', 'Energy Use'],var_name='Indicator',value_name='Value')
data_long

final= pd.concat([data_long,disasters,temperature_long])
final['Region']=final['Country'].apply(lambda x: 'Portugal' if x=='Portugal' else 'Rest of the World')

final

"""# **Data Visualization**"""

#we first need to recreate the original co2 emissions plot
co2_plot_data = final[final['Indicator'] == 'Emissions'].copy()
co2_plot_data['Value'] = pd.to_numeric(co2_plot_data['Value'], errors='coerce')
co2_plot_data = co2_plot_data.dropna(subset=['Value'])
co2_plot_data = co2_plot_data.groupby('Year')['Value'].sum().reset_index()



#now just for the portugal data!
co2_plot_PRT = final[final['Indicator'] == 'Emissions'].copy()
co2_plot_PRT=co2_plot_PRT[co2_plot_PRT['Region']=='Portugal']
co2_plot_PRT['Value'] = pd.to_numeric(co2_plot_PRT['Value'], errors='coerce')
co2_plot_PRT = co2_plot_PRT.dropna(subset=['Value'])
co2_plot_PRT = co2_plot_PRT.groupby('Year')['Value'].sum().reset_index()
co2_plot_PRT

#now to plot both on the same axis yay!
plt.plot(co2_plot_data['Year'], co2_plot_data['Value'])
plt.plot(co2_plot_PRT['Year'], co2_plot_PRT['Value'], color='red',label='Portugal')
plt.xlabel('Year')
plt.ylabel('CO2 Emissions(Metric Tons)')
plt.title('World C02 Emissions Per Year (1751-2022)')
plt.legend()
plt.grid(True)
plt.savefig('world_co2_plot.png',dpi=300) #this is for the picture summary at the very end
st.pyplot(plt.gcf())  # pass the current figure object to Streamlit

plt.clf()

co2_top_ten=final[final['Indicator']=='Emissions'] #we only want emissions data
co2_top_ten['Value']=pd.to_numeric(co2_top_ten['Value'],errors='coerce') #we need to make the values floats to actually plot them
co2_top_ten=co2_top_ten.dropna(subset=['Value'])
co2_top_ten=co2_top_ten.groupby('Country')['Value'].sum().reset_index() #sum the data for each country
co2_top_ten=co2_top_ten.sort_values(by='Value',ascending=False).head(10) #sorted in descending order then pull the top ten
co2_top_ten
co2_top_plot=final[final['Country'].isin(co2_top_ten['Country'])] #now i just take the data that has the top ten country names
co2_top_plot=co2_top_plot[co2_top_plot['Indicator']=='Emissions']
co2_top_plot['Value']=pd.to_numeric(co2_top_plot['Value'],errors='coerce')
co2_top_plot=co2_top_plot.dropna(subset=['Value'])
co2_top_plot

top_countries=co2_top_ten['Country'].tolist() #we want the names of the top ten countries
print(top_countries)
colors=['red','orange','yellow','green','blue','indigo','violet','pink','brown','black']
for country,c in zip(top_countries,colors):
  my_data=co2_top_plot[co2_top_plot['Country']==country]
  plt.plot(my_data['Year'],my_data['Value'],color=c,label=country) #so now creating a line plot for each country with a diff color
  x=my_data['Year'].iloc[-1]
  y=my_data['Value'].iloc[-1] #taking the last data point of each line and having the label appear near it
  print(x,y)
  plt.text(x+1,y,country,fontsize=8,color=c)


plt.xlabel('Year')
plt.ylabel('CO2 Emissions(Metric Tons)')
plt.title('World C02 Emissions Per Year (1900-2022)')

tile_data=co2_top_plot[co2_top_plot['Year']>=1900]
tile_data['Year']=pd.to_numeric(tile_data['Year'],errors='coerce')
tile_data['Value']=pd.to_numeric(tile_data['Value'],errors='coerce')
tile_data=tile_data.dropna(subset=['Value'])
tile_data['LogValue']=np.log(tile_data['Value']) #for tile plots we want the data to be in log form
country_tile=tile_data[tile_data['Year']==2022].sort_values(by='Value',ascending=True)['Country'].tolist() #finding the highest co2 emissions at the end for each country
tile_data['Country']=pd.Categorical(tile_data['Country'],country_tile,ordered=True) #sort in the order of highest emissions at the end for the top countries
print(country_tile)
tile_data

import plotnine #plotnine is how we can work with ggplot in python!
from plotnine import *
tile_pic=ggplot(tile_data,aes(x='Year',y='Country',fill='LogValue'))+ geom_tile()+ scale_fill_gradient("pink", "purple")+labs(title = "Top 10 CO2 Emission-producing Countries",
       subtitle = "Ordered by Emissions Produced in 2022",
       fill = "Ln(CO2 Emissions (Metric Tonnes))")+theme(legend_position='bottom')

#similar to the case study but i just picked my own gradient and made sure to change the legend position for clarity

st.pyplot(ggplot.draw(tile_pic)) 
tile_pic.save("tile_plot.png",dpi=300)

facet_data=final[final['Indicator'].isin(['Emissions','GDP','Energy Use'])]
facet_data['Year']=pd.to_numeric(facet_data['Year'],errors='coerce')
facet_data['Value']=pd.to_numeric(facet_data['Value'],errors='coerce')
facet_data=facet_data.dropna(subset=['Value'])
facet_data

ggplot(facet_data, aes(x = 'Year', y = 'Value', group = 'Country')) + geom_line() + facet_grid('Indicator ~ Region', scales = "free_y")+labs(title = "Distribution of Indicators by Year and Value", y = "Indicator Value")

scatter_data=final[final['Indicator'].isin(['Emissions','Temperature'])]
scatter_data=scatter_data[scatter_data['Region']=='Portugal']
scatter_data=scatter_data[scatter_data['Year']<=2022]
scatter_data=scatter_data[scatter_data['Year']>=1980]
scatter_data['Year']=pd.to_numeric(scatter_data['Year'],errors='coerce')
scatter_data['Value']=pd.to_numeric(scatter_data['Value'],errors='coerce')
scatter_data=scatter_data.dropna(subset=['Value'])
scatter_data #we are now setting the years and the country just to prt for the scatter plot data

#!pip install -q scikit-misc #this is so that we can use lowess like used in R!
co2_temp_facet=ggplot(scatter_data, aes(x = 'Year', y = 'Value')) + geom_point() + geom_smooth(method = "loess", se = False)+facet_wrap('~Label', scales='free_y', ncol=1)+labs(title='Portugal Emissions and Temperatures (1980-2022)')
st.pyplot(ggplot.draw(co2_temp_facet))
co2_temp_facet.save("co2_temp_facet.png",dpi=300)

facet_wide=scatter_data.pivot_table(index=['Year','Region'],columns='Indicator',values='Value',aggfunc='mean').reset_index()
facet_wide['Temperature'].dtype
#facet_wide

#now we plot emissions vs temp and use a linear regression estimate
ggplot(facet_wide, aes(x = 'Emissions', y = 'Temperature')) + geom_point() + geom_smooth(method = "lm", se = False)+labs(title='Portugal Emissions and Temperature (1980-2022)')

"""# **Data Analysis**"""

#emissions info
print('mean of emissions: ',facet_wide['Emissions'].mean(),'  std of emissions: ',facet_wide['Emissions'].std())
print('mean of temperature: ',facet_wide['Temperature'].mean(),'  std of temperature: ',facet_wide['Temperature'].std())

#correlation coefficients
print('correlation coefficient: ',facet_wide['Emissions'].corr(facet_wide['Temperature']))

from sklearn.preprocessing import StandardScaler #simplest way of scaling the data

scaler=StandardScaler()
facet_wide[['Emissions','Temperature']]=scaler.fit_transform(facet_wide[['Emissions','Temperature']])
scaled_emissions_temp=ggplot(facet_wide,aes(x='Emissions',y='Temperature'))+geom_point()+geom_smooth(method='lm',se=False)+theme_linedraw()+labs(title='Portugal Emissions and Temperature (1980-2022)',subtitle='Scaled Version')
st.pyplot(ggplot.draw(scaled_emissions_temp))
scaled_emissions_temp.save("scaled_emissions_temp.png",dpi=300)

#!pip install pillow #this was just so that the pngs would populate nicely

from PIL import Image
img1=Image.open('/content/world_co2_plot.png')
img2=Image.open('/content/tile_plot.png')
img3=Image.open('/content/co2_temp_facet.png')
img4=Image.open('/content/scaled_emissions_temp.png')
fig,axs= plt.subplots(2,2,figsize=(10,10))
axs[0,0].imshow(img1)
axs[0,0].axis('off')
axs[0,0].set_title('World CO2 Emissions')

axs[0,1].imshow(img2)
axs[0,1].axis('off')
axs[0,1].set_title('Top 10 CO2 Emission-producing Countries')

axs[1,0].imshow(img3)
axs[1,0].axis('off')
axs[1,0].set_title('Portugal Emissions and Temperatures')

axs[1,1].imshow(img4)
axs[1,1].axis('off')
axs[1,1].set_title('Scaled Portugal Emissions and Temperatures')
